var ms = require('easy-ms');

var action_verb = ['execute', 'do', 'call', 'then', 'perform', 'fulfil'];

function addToLater(fn){
    this._then.push(fn);
    return this;
}
function addToLaterCount(count, fn){
    if(typeof count === 'function'){
        fn = count;
        count = undefined;
    }
    this._then.push({ action: fn, count: count });
    return this;
}
var TIMEOUT_CLASS = function(ms){
    this._then = [];
    setTimeout(function(){
        this._then.forEach(function(fn){
            fn();
        });
    }.bind(this), ms);
};
var INTERVAL_CLASS = function(ms){
    this._then = [];
    setInterval(function(){
        this._then.forEach(function(fn){
            fn();
        });
    }.bind(this), ms);
}
var INTERVAL_UNTIL_CLASS = function(ms){
    this._then = [];
    this._prune = [];
    this._interval = setInterval(function(){
        this._then.forEach(function(fn){
            if(fn.count !== undefined && fn.count-- === 0){
                this._prune.push(fn);
            }else{
                fn.action();
            }
        }.bind(this));
        if(this._prune.length > 0){
            this._prune.forEach(function(fn){
                var index = this._then.indexOf(fn);
                if(index > -1){
                    this._then.splice(index, 1);
                }
            }.bind(this));
            this._prune.splice(0, this._prune.length);
            if(this._then.length === 0){
                clearInterval(this._interval);
            }
        }
    }.bind(this), ms);
}

action_verb.forEach(function(verb){
    TIMEOUT_CLASS.prototype[verb] = addToLater;
    INTERVAL_CLASS.prototype[verb] = addToLater;
    INTERVAL_UNTIL_CLASS.prototype[verb] = addToLaterCount;
});

var TIMEOUT = function(){
    var time = ms.apply({}, arguments);
    return new TIMEOUT_CLASS(time);
};
var INTERVAL = function(){
    var time = ms.apply({}, arguments);
    return new INTERVAL_CLASS(time);
};
var INTERVAL_UNTIL = function(){
    var time = ms.apply({}, arguments);
    return new INTERVAL_UNTIL_CLASS(time);
};

var MODULE = {};
MODULE.Timeout = TIMEOUT;
MODULE.timeout = TIMEOUT;
MODULE.Interval = INTERVAL;
MODULE.interval = INTERVAL;
MODULE.Interval.count = INTERVAL_UNTIL;
MODULE.interval.count = INTERVAL_UNTIL;
exports = module.exports = MODULE;
